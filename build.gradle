// build script is only for gradle, not for app
buildscript {
    ext {
        springBootVersion = '1.5.6.RELEASE'
    }
    repositories {
        mavenLocal()
        maven {
            url 'http://maven.aliyun.com/nexus/content/groups/public/'
        }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

// standard properties
group = 'org.xbib.elasticsearch.importer'
version = '2.3.4.1'

println "Host: " + java.net.InetAddress.getLocalHost()
println "Gradle: " + gradle.gradleVersion + " JVM: " + org.gradle.internal.jvm.Jvm.current() + " Groovy: " + GroovySystem.getVersion()
println "Build: group: '${project.group}', name: '${project.name}', version: '${project.version}'"

// custom properties
ext {
    pluginName = 'elasticsearch-jdbc'
    pluginClassname = 'org.xbib.elasticsearch.plugin.jdbc.JDBCPlugin'
    pluginDescription = 'JDBC importer service for Elasticsearch'
    user = 'jprante'
    name = 'elasticsearch-jdbc'
    description = 'JDBC importer for Elasticsearch'
    versions = [
            'elasticsearch'       : '2.3.4',
            'elasticsearch-helper': '2.3.4.0',
            'jsr166e'             : '1.1.0',
            'jna'                 : '4.1.0',
            'spatial4j'           : '0.5',
            'jts'                 : '1.13',
            'jdbc-driver-csv'     : '1.0.0',
            'junit'               : '4.12',
            'testng'              : '6.9.10',
            'mysql'               : '5.1.38',
    ]
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'


repositories {
    mavenLocal()
    maven {
        url 'http://maven.aliyun.com/nexus/content/groups/public/'
    }
    mavenCentral()
    jcenter()
    maven {
        url "http://xbib.org/repository"
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources {
            srcDir file('src/integration-test/resources')
        }
    }
}

configurations.all {
    // don't cache cache dynamic versions
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    // don't cache changing modules at all
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-websocket")
    compile('org.springframework.boot:spring-boot-starter-web')
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.1'
    compile 'org.elasticsearch:elasticsearch:' + versions.elasticsearch
    // helper for bulk api
    compile 'org.xbib.elasticsearch.plugin:elasticsearch-helper:' + versions.'elasticsearch-helper'
    // testng is stronger than junit
    testCompile 'org.testng:testng:' + versions.testng
    //Java Native Access, lile .dll
    testCompile 'net.java.dev.jna:jna:' + versions.jna
    // Workaround for a known issue with TestNG 6.x: explicitly add Guice (Gradle will fail to run tests otherwise)
    // BTW, guice is 100 times faster than spring, good for small app
    testCompile 'com.google.inject:guice:3.0'
    // ReportNG is a simple HTML reporting plug-in for the TestNG unit-testing framework
    testCompile 'org.uncommons:reportng:1.1.4'
    integrationTestCompile 'org.testng:testng:' + versions.testng
    integrationTestCompile 'org.elasticsearch:elasticsearch:' + versions.elasticsearch
    integrationTestCompile 'net.java.dev.jna:jna:' + versions.jna
    // keep this for testing csv
//    driverJars('org.xbib.jdbc:jdbc-driver-csv:' + versions.'jdbc-driver-csv') {
//        exclude group: 'org.apache.logging.log4j'
//    }
    // add mysql to compile for spring boot app
    compile 'mysql:mysql-connector-java:' + versions.mysql

}

//TODO: do we need this anymore?
task integrationTest(type: Test, dependsOn: [':unpackPlugin']) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = configurations.integrationTestCompile
    classpath += fileTree('plugins/' + pluginName).include('*.jar')
    classpath += sourceSets.integrationTest.output
    // remove identical jars from classpath, otherwise Elasticsearch will complain a "jar hell"
    //classpath -= configurations.releaseJars
    outputs.upToDateWhen { false }
    systemProperty 'path.home', projectDir.absolutePath
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

apply from: 'gradle/testngXmlSuite.gradle'
apply from: 'gradle/awesome.gradle'

test {
//    dependsOn testngAwesome
    dependsOn testngXml
}



