dependencies {
    testCompile 'mysql:mysql-connector-java:' + versions.mysql
}

task mysqlIntegrationTest(type: Test) {
    systemProperty 'path.home', projectDir.absolutePath + '/build'
    systemProperty 'java.io.tmpdir', projectDir.absolutePath + '/build/tmp'
    ext.useDefaultListeners = true
    ext.workingDirectory = projectDir.absolutePath + '/build'
    useTestNG() {
        testLogging.showStandardStreams = false
        suiteXmlBuilder().suite(name: 'gradle-testng-jdbc-mysql', verbose: '1') {
            parameter(name: 'starturl', value: 'jdbc:mysql://localhost:3306/test')
            parameter(name: 'stopurl', value: 'jdbc:mysql://localhost:3306/test')
            parameter(name: 'user', value: 'root')
            parameter(name: 'password', value: '')
            test(name : 'mysql Source Tests') {
                parameter(name: 'create', value: 'mysql/create-ordertables.sql')
                parameter(name: 'delete', value: 'mysql/delete-ordertables.sql')
                parameter(name: 'sql1', value: 'select * from orders')
                parameter(name: 'sql2', value: 'select * from orders')
                parameter(name: 'sql3', value: 'select * from products where amount is NULL')
                classes([:]) {
                    'class'(name: 'org.xbib.jdbc.strategy.standard.StandardSourceTests')
                }
            }
            test(name: 'mysql Sink Tests') {
                parameter(name: 'create', value: 'mysql/create-ordertables.sql')
                parameter(name: 'delete', value: 'mysql/delete-ordertables.sql')
                parameter(name: 'task1', value: 'mysql/task1.json')
                parameter(name: 'task2', value: 'mysql/task2.json')
                parameter(name: 'task3', value: 'mysql/task3.json')
                parameter(name: 'sql1', value: 'insert into products (name, amount, price) values(?,?,?)')
                classes([:]) {
                    'class'(name: 'org.xbib.jdbc.strategy.standard.StandardSinkTests')
                }
            }
            test(name: 'mysql Job Tests') {
                parameter(name: 'create', value: 'mysql/create-jobtables.sql')
                parameter(name: 'delete', value: 'mysql/delete-jobtables.sql')
                parameter(name: 'task1', value: 'mysql/jobtask1.json')
                parameter(name: 'sql1', value: 'select count(*) from products')
                parameter(name: 'sql2', value: 'insert into products (_job, name, amount, price) values(?,?,?,?)')
                classes([:]) {
                    'class'(name: 'org.xbib.jdbc.strategy.standard.StandardCounterTests')
                }
            }
            test(name: 'mysql Schedule Tests') {
                parameter(name: 'create', value: 'mysql/create-ordertables.sql')
                parameter(name: 'delete', value: 'mysql/delete-ordertables.sql')
                parameter(name: 'task6', value: 'mysql/task6.json')
                parameter(name: 'task7', value: 'mysql/task7.json')
                parameter(name: 'sql1', value: 'insert into products (name, amount, price) values(?,?,?)')
                parameter(name: 'sql2', value: 'insert into logs (modified, message) values(?,?)')
                classes([:]) {
                    'class'(name: 'org.xbib.jdbc.strategy.standard.StandardScheduleTests')
                }
            }
        }
    }
    options {
        listeners << 'org.xbib.elasticsearch.util.TestListener'
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
    }
}